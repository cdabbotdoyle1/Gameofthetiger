#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//-----------------------------------------------socket.io----------------------------------
var io = require('socket.io')(server);

// io.on('connection', (socket) => {
//   console.log('a user connected:', socket.id);
//   socket.on('SEND_MESSAGE', (msg) => {
//     console.log('message sent');
//     console.log('from socket id:', socket.id);
//     io.emit('RECEIVE_MESSAGE', msg);
//   });
//   socket.on('disconnect', () => {
//     console.log('user disconnected',socket.id);
//   });
// });
//---------------------------------2048---------------------------
const connections = [null, null];

// Handle a socket connection request from web client
io.on('connection', function (socket) {
  
  // Find an available player number
  let playerIndex = -1;
  for (var i in connections) {
    if (connections[i] === null) {
      playerIndex = i;
      break;
    }
  }
  
  if(playerIndex!==-1){
  connections[playerIndex] = socket;
  }
  
  // Tell the connecting client what player number they are
  socket.emit('PLAYER_NUMBER', playerIndex);
  
  //handle message sending
  console.log('a user connected:', socket.id);

  socket.on('SEND_MESSAGE', (msg) => {
    console.log('message sent');
    console.log('from socket id:', socket.id);
    io.emit('RECEIVE_MESSAGE', msg);
  });
  socket.on('disconnect', () => {
    console.log('user disconnected',socket.id);
    console.log(`Player ${playerIndex} Disconnected`);
    connections[playerIndex] = null;
  });


  //handle move shared by one user--------------------------------------need to adjust for bagchaal---------
  socket.on('actuate', function (data) {
    const { grid, metadata } = data; // Get grid and metadata properties from client
    
    const move = {
      playerIndex,
      grid,
      metadata,
    };

    // Emit the move to all other clients
    socket.broadcast.emit('move', move);
  });

  // Ignore player 3
  if (playerIndex === -1) return;
  
  connections[playerIndex] = socket;
  
  // Tell everyone else what player number just connected
  socket.broadcast.emit('player-connect', playerIndex);
});

//-----------------------------------------------socket.io end-----------------------------------
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
