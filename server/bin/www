#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
//var http = require('http');
var http = require('http');
const chatrooms = require('../models/chatrooms.model');
const chatmessages = require('../models/chatmessages.model');

/*
    SSL
*/


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

//var server = http.createServer(app);

/*
https initializations
*/

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


//-----------------------------------------------socket.io----------------------------------
var io = require('socket.io')(server);

const connections = [null, null];

// Handle a socket connection request from web client
io.on('connection', async function (socket) {

  socket.on("join", async room => {
    socket.join(room);
    let messages = await chatmessages.find({ chatRoomID: room });
    messages.forEach(function (document) {
      const {author, message} = document;
      let msg = {author:author, message:message}
      io.to(room).emit('RECEIVE_MESSAGE_ROOM', msg);
    });
  });

  // Find an available player number
  let playerIndex = -1;
  for (var i in connections) {
    if (connections[i] === null) {
      playerIndex = i;
      break;
    }
  }
  
  if(playerIndex!==-1){
  connections[playerIndex] = socket;
  }
  
  // Tell the connecting client what player number they are
  socket.emit('PLAYER_NUMBER', playerIndex);
  //emit all global chat messages to the client when they connect
  let globalmessages = await chatmessages.find({ chatRoomID: 'global' });
  globalmessages.forEach(function (document) {
    const {author, message} = document;
    let msg = {author:author, message:message}
    io.emit('RECEIVE_MESSAGE', msg);
  });
  
  //handle message sending
  console.log('a user connected:', socket.id);

  //for global chat room
  socket.on('SEND_MESSAGE', async (msg) => {
    console.log('message sent');
    console.log('from socket id:', socket.id);
    //msg has author and message
    //insert the message on the chatmessages model as a global room message
    const {author, message} = msg
    await chatmessages.create(
      {chatRoomID:'global', author, message});

    io.emit('RECEIVE_MESSAGE', msg);
  });

  socket.on('SEND_MESSAGE_ROOM', async(msg) => {
    console.log('message sent');
    console.log('from socket id:', socket.id);
    console.log("----------------------------------------");
    const {author, message} = msg;
    console.log(msg);
    await chatmessages.create(
      {chatRoomID:msg.roomID, author, message});

    io.to(msg.roomID).emit('RECEIVE_MESSAGE_ROOM', msg);
  });

  socket.on('disconnect', () => {
    console.log('user disconnected',socket.id);
    console.log(`Player ${playerIndex} Disconnected`);
    connections[playerIndex] = null;
  });


  //handle move shared by one user
  socket.on('SEND_MOVE', async function (data) {
    const { boardState, goatsOnBoard, gisnext, goatsTaken, winner} = data;
    
    const move = {
      playerIndex, boardState, goatsOnBoard, goatsTaken, gisnext, winner
    };

    // if the winner is decided find the room in the database and update
    if(winner!=null)
    {
      let listOfRooms = await chatrooms.find({name:data.roomID});
      listOfRooms[0].winner = winner;
      await listOfRooms[0].save();
    }

    // Emit the move to all other clients
    socket.broadcast.to(data.roomID).emit('RECEIVE_MOVE', move);
  });

  // Ignore player 3
  if (playerIndex === -1) return;
  
  connections[playerIndex] = socket;
  
  // Tell everyone else what player number just connected
  socket.broadcast.emit('player-connect', playerIndex);
});

//-----------------------------------------------socket.io end-----------------------------------
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
